From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: M2ke4U <79621885+MrHua269@users.noreply.github.com>
Date: Wed, 15 Nov 2023 21:18:17 +0800
Subject: [PATCH] Remove thread check in getDataAnyThread method


diff --git a/src/main/java/me/earthme/molia/pool/WorldDataPool.java b/src/main/java/me/earthme/molia/pool/WorldDataPool.java
index afce0b58bad6cf7aef95854c84cc4f783b67321c..89261a9307cbd578d4585b410372a5fa11c95c65 100644
--- a/src/main/java/me/earthme/molia/pool/WorldDataPool.java
+++ b/src/main/java/me/earthme/molia/pool/WorldDataPool.java
@@ -23,30 +23,30 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;
 public class WorldDataPool {
     public RegionizedWorldData getDataAnyThread(Entity ent){
         final RegionizedWorldData got = ent.level().getCurrentWorldData();
-        return got == null || !TickThread.isTickThreadFor(ent) ? getDataOffTickThread(ent) : got; //Skip it if we got the current world data
+        return got == null ? getDataOffTickThread(ent) : got; //Skip it if we got the current world data
     }
 
     public RegionizedWorldData getDataAnyThread(Level level, BlockPos pos){
         final RegionizedWorldData got = level.getCurrentWorldData();
-        return got == null || !TickThread.isTickThreadFor((ServerLevel) level,pos) ? getDataOffTickThread(pos.getX() >> 4,pos.getZ() >> 4, ((ServerLevel) level)) : got; //Skip it if we got the current world data
+        return got == null ? getDataOffTickThread(pos.getX() >> 4,pos.getZ() >> 4, ((ServerLevel) level)) : got; //Skip it if we got the current world data
     }
 
     public RegionizedWorldData getDataAnyThread(Level level, int x,int z){
         final RegionizedWorldData got = level.getCurrentWorldData();
-        return got == null || !TickThread.isTickThreadFor((ServerLevel) level,x >> 4,z >>4) ? getDataOffTickThread(x >> 4,z >> 4, ((ServerLevel) level)) : got; //Skip it if we got the current world data
+        return got == null ? getDataOffTickThread(x >> 4,z >> 4, ((ServerLevel) level)) : got; //Skip it if we got the current world data
     }
 
     public RegionizedWorldData getDataAnyThread(Location loc){
         final RegionizedWorldData got = ((CraftWorld) loc.getWorld()).getHandle().getCurrentWorldData();
-        return got == null || !TickThread.isTickThreadFor(((CraftWorld) loc.getWorld()).getHandle(),(int)loc.getX() >> 4,(int)loc.getZ() >> 4) ? getDataOffTickThread((int)loc.getX() >> 4,(int)loc.getZ() >> 4,((CraftWorld) loc.getWorld()).getHandle()) : got; //Skip it if we got the current world data
+        return got == null ? getDataOffTickThread((int)loc.getX() >> 4,(int)loc.getZ() >> 4,((CraftWorld) loc.getWorld()).getHandle()) : got; //Skip it if we got the current world data
     }
 
     public RegionizedWorldData getDataOffTickThread(Entity entity){
-        RegionizedWorldData ret = entity.level().getCurrentWorldData();
+        RegionizedWorldData ret;
 
-        if (ret != null && ret.pendingTeleportationList.contains(entity)){
+        /*if (ret != null && ret.pendingTeleportationList.contains(entity)){
             return ret;
-        }
+        }*/
 
         ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> target = ((ServerLevel) entity.level()).regioniser.getRegionAtUnsynchronised(entity.sectionX,entity.sectionZ);
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 04cf08b3b94ba04a3c3e0b9d569025285aeb6d17..ec0275326848044f630fea249078a1b589bbff4c 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -3840,9 +3840,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                     );
                     List<EntityTreeNode> fullTree = passengerTree.getFullTree();
                     for (EntityTreeNode node : fullTree) {
-                        node.root.level.getCurrentWorldData().pendingTeleportationList.add(node.root); //DirtyMolia
+                        //node.root.level.getCurrentWorldData().pendingTeleportationList.add(node.root); //DirtyMolia
                         node.root.placeSingleSync(originWorld, destination, node, teleportFlags);
-                        node.root.level.getCurrentWorldData().pendingTeleportationList.remove(node.root); //DirtyMolia
+                        //node.root.level.getCurrentWorldData().pendingTeleportationList.remove(node.root); //DirtyMolia
                     }
                     // restore passenger tree
                     passengerTree.restore();
