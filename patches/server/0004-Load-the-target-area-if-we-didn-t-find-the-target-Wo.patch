From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Sat, 26 Aug 2023 13:54:25 +0800
Subject: [PATCH] Load the target area if we didn't find the target WorldData


diff --git a/src/main/java/me/earthme/molia/pool/WorldDataPool.java b/src/main/java/me/earthme/molia/pool/WorldDataPool.java
index cdf9e499af26643c1311fe98d3f3b9982982f418..053878fd09252366412b0bde7023344ccc56f0c8 100644
--- a/src/main/java/me/earthme/molia/pool/WorldDataPool.java
+++ b/src/main/java/me/earthme/molia/pool/WorldDataPool.java
@@ -6,15 +6,19 @@ import io.papermc.paper.threadedregions.ThreadedRegionizer;
 import io.papermc.paper.threadedregions.TickRegionScheduler;
 import io.papermc.paper.threadedregions.TickRegions;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectLinkedOpenHashMap;
+import me.earthme.molia.util.SchedulerUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.Level;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 import java.util.Map;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantLock;
@@ -24,28 +28,49 @@ public class WorldDataPool {
     private final Map<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>, RegionizedWorldData> regionizer2Data = new Reference2ObjectLinkedOpenHashMap<>();
     private final ReadWriteLock accessLock = new ReentrantReadWriteLock();
     //private final SWMRHashTable<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>, RegionizedWorldData> regionizer2Data = new SWMRHashTable<>();
+    private static final MinecraftInternalPlugin NULL_PLUGIN = new MinecraftInternalPlugin();
 
     public RegionizedWorldData getDataAnyThread(Entity ent){
         final RegionizedWorldData got = ent.level().getCurrentWorldData();
-        return got == null ? getDataOffTickThread(ent.getBukkitEntity().getLocation()) : got;
+        return got == null ? getDataOffTickThread(ent.getBukkitEntity().getLocation()) : got; //Skip it if we got the current world data
     }
 
     public RegionizedWorldData getDataAnyThread(Level level, BlockPos pos){
         final RegionizedWorldData got = level.getCurrentWorldData();
-        return got == null ? getDataOffTickThread(new Location(level.getWorld(),pos.getX(),0,pos.getZ())) : got;
+        return got == null ? getDataOffTickThread(new Location(level.getWorld(),pos.getX(),0,pos.getZ())) : got; //Skip it if we got the current world data
     }
 
     @Nullable
     public RegionizedWorldData getDataOffTickThread(@NotNull Location location){
         ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> target = ((CraftWorld) location.getWorld()).getHandle().regioniser.getRegionAtUnsynchronised(location.getBlockX() >> 4,location.getBlockZ() >> 4);
+        RegionizedWorldData ret = null;
 
+        this.accessLock.readLock().lock();
+        try {
+            ret = this.regionizer2Data.get(target);
+        }finally {
+            this.accessLock.readLock().unlock();
+        }
 
+        if (ret != null){
+            return ret;
+        }
+
+        //If we didn't find any world data,Load the target chunk to find one
+        CompletableFuture.runAsync(()->{
+            //Do nothing here because the add logic is in another class
+        }, SchedulerUtil.regionSchedulerAsExecutor(location)).join(); //Run blocking
+
+        //Get the target world data again
         this.accessLock.readLock().lock();
         try {
-            return this.regionizer2Data.get(target);
+            ret = this.regionizer2Data.get(target);
         }finally {
             this.accessLock.readLock().unlock();
         }
+
+        //Return it anyway
+        return ret;
     }
 
     public void dropRegionWorldData(TickRegionScheduler.TickThreadRunner target){
