From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <wangxyper@163.com>
Date: Wed, 23 Aug 2023 17:10:15 +0800
Subject: [PATCH] Fix region data can not be removed & Optimize data caching


diff --git a/src/main/java/me/earthme/molia/pool/WorldDataPool.java b/src/main/java/me/earthme/molia/pool/WorldDataPool.java
index 778ce939712c2238ca94b277f79038a3bafdd488..000bbb22f32ab8d2858ecd0f94409aa67401a391 100644
--- a/src/main/java/me/earthme/molia/pool/WorldDataPool.java
+++ b/src/main/java/me/earthme/molia/pool/WorldDataPool.java
@@ -1,8 +1,10 @@
 package me.earthme.molia.pool;
 
-import io.papermc.paper.threadedregions.*;
-import io.papermc.paper.util.TickThread;
-import it.unimi.dsi.fastutil.objects.Reference2ObjectLinkedOpenHashMap;
+import ca.spottedleaf.concurrentutil.map.SWMRHashTable;
+import io.papermc.paper.threadedregions.RegionizedWorldData;
+import io.papermc.paper.threadedregions.ThreadedRegionizer;
+import io.papermc.paper.threadedregions.TickRegionScheduler;
+import io.papermc.paper.threadedregions.TickRegions;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.Level;
@@ -11,13 +13,13 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.Map;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
 
 public class WorldDataPool {
-    private final Map<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>, RegionizedWorldData> regionizer2Data = new Reference2ObjectLinkedOpenHashMap<>();
-    private final ReadWriteLock accessLock = new ReentrantReadWriteLock();
+    //private final Map<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>, RegionizedWorldData> regionizer2Data = new Reference2ObjectLinkedOpenHashMap<>();
+    private final Lock accessLock = new ReentrantLock();
+    private final SWMRHashTable<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>, RegionizedWorldData> regionizer2Data = new SWMRHashTable<>();
 
     public RegionizedWorldData getDataAnyThread(Entity ent){
         final RegionizedWorldData got = ent.level().getCurrentWorldData();
@@ -31,30 +33,25 @@ public class WorldDataPool {
 
     @Nullable
     public RegionizedWorldData getDataOffTickThread(@NotNull Location location){
-        this.accessLock.readLock().lock();
-        try {
-            ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> target = ((CraftWorld) location.getWorld()).getHandle().regioniser.getRegionAtUnsynchronised(location.getBlockX() >> 4,location.getBlockZ() >> 4);
-            return this.regionizer2Data.get(target);
-        }finally {
-            this.accessLock.readLock().unlock();
-        }
+        ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> target = ((CraftWorld) location.getWorld()).getHandle().regioniser.getRegionAtUnsynchronised(location.getBlockX() >> 4,location.getBlockZ() >> 4);
+        return this.regionizer2Data.get(target);
     }
 
     public void dropRegionWorldData(TickRegionScheduler.TickThreadRunner target){
-        this.accessLock.writeLock().lock();
+        this.accessLock.lock();
         try {
             if (!this.regionizer2Data.containsKey(target.currentTickingRegion)){
                 return;
             }
 
-            this.regionizer2Data.remove(target);
+            this.regionizer2Data.remove(target.currentTickingRegion);
         }finally {
-            this.accessLock.writeLock().unlock();
+            this.accessLock.unlock();
         }
     }
 
     public void onUpdateRegionWorldData(TickRegionScheduler.TickThreadRunner runner,RegionizedWorldData data){
-        this.accessLock.writeLock().lock();
+        this.accessLock.lock();
         try {
             boolean flag = false;
             if (!this.regionizer2Data.containsKey(runner.currentTickingRegion)){
@@ -66,7 +63,7 @@ public class WorldDataPool {
                 this.regionizer2Data.replace(runner.currentTickingRegion,data);
             }
         }finally {
-            this.accessLock.writeLock().unlock();
+            this.accessLock.unlock();
         }
     }
 }
