From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: M2ke4U <wangxyper@163.com>
Date: Sat, 24 Jun 2023 07:27:39 +0800
Subject: [PATCH] Leaves Utils


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index e228edaef0a4c280f0e74b917f32c3eb9335f4b5..c03678772dd283d203d59be31a333710cc46e3df 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -417,6 +417,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     private UUID originWorld;
     public boolean freezeLocked = false; // Paper - Freeze Tick Lock API
     public boolean collidingWithWorldBorder; // Paper
+    private CompoundTag leavesData = new CompoundTag(); // Leaves - Leaves ex data
 
     public void setOrigin(@javax.annotation.Nonnull Location location) {
         this.origin = location.toVector();
@@ -2442,6 +2443,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 nbt.putBoolean("Paper.FreezeLock", true);
             }
             // Paper end
+            nbt.put("Leaves.Data", leavesData); // Leaves - leaves ex data
             return nbt;
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
@@ -2610,6 +2612,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 freezeLocked = nbt.getBoolean("Paper.FreezeLock");
             }
             // Paper end
+            // Leaves start - leaves ex data
+            if (nbt.contains("Leaves.Data")) {
+                leavesData = nbt.getCompound("Leaves.Data");
+            }
+            // Leaves start - leaves ex data
 
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
@@ -5590,4 +5597,10 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return ((net.minecraft.server.level.ServerChunkCache) level.getChunkSource()).isPositionTicking(this);
     }
     // Paper end
+
+    // Leaves start - leaves ex data
+    public CompoundTag getLeavesData() {
+        return leavesData;
+    }
+    // Leaves end - leaves ex data
 }
diff --git a/src/main/java/top/leavesmc/leaves/LeavesLogger.java b/src/main/java/top/leavesmc/leaves/LeavesLogger.java
new file mode 100644
index 0000000000000000000000000000000000000000..890b91a95719f18a75bc2c2176ef5cb9f2bf4274
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/LeavesLogger.java
@@ -0,0 +1,16 @@
+package top.leavesmc.leaves;
+
+import org.bukkit.Bukkit;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class LeavesLogger extends Logger {
+    public static final LeavesLogger LOGGER = new LeavesLogger();
+
+    private LeavesLogger() {
+        super("Leaves", null);
+        setParent(Bukkit.getLogger());
+        setLevel(Level.ALL);
+    }
+}
diff --git a/src/main/java/top/leavesmc/leaves/util/ProtocolUtils.java b/src/main/java/top/leavesmc/leaves/util/ProtocolUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..a29da205e542edb0400b8c5db76dc97cff015b8c
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/util/ProtocolUtils.java
@@ -0,0 +1,19 @@
+package top.leavesmc.leaves.util;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
+import net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerPlayer;
+import org.jetbrains.annotations.NotNull;
+
+public class ProtocolUtils {
+
+    public static void sendPayloadPacket(@NotNull ServerPlayer player, ResourceLocation channel, FriendlyByteBuf data) {
+        player.connection.send(new ClientboundCustomPayloadPacket(channel, data));
+    }
+
+    public static boolean isNamespacePacket(@NotNull ServerboundCustomPayloadPacket packet, String namespace) {
+        return packet.identifier.getNamespace().equals(namespace);
+    }
+}
