From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: M2ke4U <79621885+MrHua269@users.noreply.github.com>
Date: Sun, 12 Nov 2023 13:13:10 +0800
Subject: [PATCH] Refactor region2worlddatamap and adjust hook position


diff --git a/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java b/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java
index b1b0a3de5c2d06b6eaf55c4a072a6e492f857b0b..1a787bd32f6408287ff3e14dd3dea7a65f72ab20 100644
--- a/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java
+++ b/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java
@@ -158,6 +158,7 @@ public final class ThreadedRegionizer<R extends ThreadedRegionizer.ThreadedRegio
 
     private void onRegionCreate(final ThreadedRegion<R, S> region) {
         final ThreadedRegion<R, S> conflict;
+        Level.WORLD_DATA_POOL.add(region);
         if ((conflict = this.regionsById.putIfAbsent(region.id, region)) != null) {
             throw new IllegalStateException("Region " + region + " is already mapped to " + conflict);
         }
@@ -165,6 +166,7 @@ public final class ThreadedRegionizer<R extends ThreadedRegionizer.ThreadedRegio
 
     private void onRegionDestroy(final ThreadedRegion<R, S> region) {
         final ThreadedRegion<R, S> removed = this.regionsById.remove(region.id);
+        Level.WORLD_DATA_POOL.drop(removed);
         if (removed != region) {
             throw new IllegalStateException("Expected to remove " + region + ", but removed " + removed);
         }
@@ -804,7 +806,6 @@ public final class ThreadedRegionizer<R extends ThreadedRegionizer.ThreadedRegio
         }
 
         private void onCreate() {
-            Level.WORLD_DATA_POOL.add(this);
             this.regioniser.onRegionCreate(this);
             this.regioniser.callbacks.onRegionCreate(this);
         }
@@ -813,7 +814,6 @@ public final class ThreadedRegionizer<R extends ThreadedRegionizer.ThreadedRegio
             if (wasActive) {
                 this.regioniser.callbacks.onRegionInactive(this);
             }
-            Level.WORLD_DATA_POOL.drop(this);
             this.regioniser.callbacks.onRegionDestroy(this);
             this.regioniser.onRegionDestroy(this);
         }
diff --git a/src/main/java/me/earthme/molia/pool/WorldDataPool.java b/src/main/java/me/earthme/molia/pool/WorldDataPool.java
index 8bb2a07fd650defa87d688f18278764f836e587e..8e9d67dc9511400990153bbad6f169bce7ee6d67 100644
--- a/src/main/java/me/earthme/molia/pool/WorldDataPool.java
+++ b/src/main/java/me/earthme/molia/pool/WorldDataPool.java
@@ -20,17 +20,17 @@ import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 public class WorldDataPool {
-    private final Map<ThreadedRegionizer.ThreadedRegion<?,?>,RegionizedWorldData> regionizedWorldDataMap = Maps.newHashMap();
+    private final Map<Long,RegionizedWorldData> regionizedWorldDataMap = Maps.newHashMap();
     private final ReadWriteLock accessLock = new ReentrantReadWriteLock();
 
     public void add(ThreadedRegionizer.ThreadedRegion<?,?> region){
         this.accessLock.writeLock().lock();
         try {
-            if (this.regionizedWorldDataMap.containsKey(region)){
+            if (this.regionizedWorldDataMap.containsKey(region.id)){
                 return;
             }
 
-            this.regionizedWorldDataMap.put(region,null);
+            this.regionizedWorldDataMap.put(region.id,null);
         }finally {
             this.accessLock.writeLock().unlock();
         }
@@ -39,11 +39,11 @@ public class WorldDataPool {
     public void updateRegion(ThreadedRegionizer.ThreadedRegion<?,?> region, RegionizedWorldData data){
         this.accessLock.writeLock().lock();
         try {
-            if (!this.regionizedWorldDataMap.containsKey(region)){
+            if (!this.regionizedWorldDataMap.containsKey(region.id)){
                 return;
             }
 
-            this.regionizedWorldDataMap.replace(region,data);
+            this.regionizedWorldDataMap.replace(region.id,data);
         }finally {
             this.accessLock.writeLock().unlock();
         }
@@ -52,7 +52,7 @@ public class WorldDataPool {
     public void drop(ThreadedRegionizer.ThreadedRegion<?,?> region){
         this.accessLock.writeLock().lock();
         try {
-            this.regionizedWorldDataMap.remove(region);
+            this.regionizedWorldDataMap.remove(region.id);
         }finally {
             this.accessLock.writeLock().unlock();
         }
@@ -89,7 +89,7 @@ public class WorldDataPool {
 
         this.accessLock.readLock().lock();
         try {
-            ret = this.regionizedWorldDataMap.get(target);
+            ret = this.regionizedWorldDataMap.get(target.id);
         }finally {
             this.accessLock.readLock().unlock();
         }
@@ -108,7 +108,7 @@ public class WorldDataPool {
 
         this.accessLock.readLock().lock();
         try {
-            ret = this.regionizedWorldDataMap.get(target);
+            ret = this.regionizedWorldDataMap.get(target.id);
         }finally {
             this.accessLock.readLock().unlock();
         }
